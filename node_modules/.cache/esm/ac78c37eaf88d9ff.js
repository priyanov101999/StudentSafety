let io,PoliceStation,Report,ResponseUtil,booleanValidator,numberValidator,stringValidator;_af8‍.x([["createReport",()=>createReport],["assignReportToPoliceman",()=>assignReportToPoliceman],["resolvedReport",()=>resolvedReport],["ReportList",()=>ReportList],["getAssignedReportsByPoliceMan",()=>getAssignedReportsByPoliceMan],["jsonValidator",()=>jsonValidator],["validateMyJSON",()=>validateMyJSON]]);_af8‍.w("../../app.js",[["io",["io"],function(v){io=v}]]);_af8‍.w("../models/PoliceStation.js",[["default",["PoliceStation"],function(v){PoliceStation=v}]]);_af8‍.w("../models/Report.js",[["default",["Report"],function(v){Report=v}]]);_af8‍.w("../utils/ResponseUtil.js",[["default",["ResponseUtil"],function(v){ResponseUtil=v}]]);_af8‍.w("../validators/StringValidator.js",[["booleanValidator",["booleanValidator"],function(v){booleanValidator=v}],["numberValidator",["numberValidator"],function(v){numberValidator=v}],["stringValidator",["stringValidator"],function(v){stringValidator=v}]]);








       const createReport = async (req, res, next) => {
  try {
    let data = req.body;
    let stationExists = await PoliceStation.query()
      .where({
        latitude: data.stationLatitude,
        longitude: data.stationLongitude,
      })
      .first();
    if (!stationExists) {
      ResponseUtil.failure("Station not found! Please try again.", 404, res);
    }
    let { stationLatitude, stationLongitude, ...payload } = data;
    payload.policeStationId = stationExists.id;
    payload.reportDate = new Date();

    await Report.query()
      .insert(payload)
      .then((data) => {
        io.emit("report", {
          action: "created",
          report: { ...data },
        });
        ResponseUtil.success(data, 201, `Report created successfully`, res);
      });
  } catch (error) {
    ResponseUtil.failure(error.name, error.statusCode, res);
  }
};

       const assignReportToPoliceman = async (req, res, next) => {
  try {
    let id = req.params.id;
    let policemanId = req.body.policemanId;
    let report = await Report.query().findById(id);

    if (!report) {
      ResponseUtil.failure("Report not found", 404, res);
    } else {
      await Report.query()
        .update({
          ...report,
          policemanId,
          id,
        })
        .where({ id })
        .then((data) => {
          // io.emit("report", {
          //   action: "assignedReport",
          //   policemanId,
          // });
          io.sockets.in(policemanId).emit("report", {
            action: "assignedReport",
            policemanId,
          });
          return ResponseUtil.success(
            data,
            200,
            `Report updated successfully`,
            res
          );
        });
    }
  } catch (error) {
    ResponseUtil.failure(error.name, error.statusCode, res);
  }
};

       const resolvedReport = async (req, res, next) => {
  try {
    let id = req.params.id;
    let report = await Report.query().findById(id);
    if (!report) {
      ResponseUtil.failure("Report not found", 404, res);
    } else {
      report.isResolved = true;
      await Report.query()
        .upsertGraphAndFetch({ ...report, id })
        .then((data) =>
          ResponseUtil.success(data, 200, `Report updated successfully`, res)
        );
    }
  } catch (error) {
    ResponseUtil.failure(error.name, error.statusCode, res);
  }
};

       const ReportList = async (req, res, next) => {
  try {
    let list = await Report.query();
    ResponseUtil.success(list, 200, `Report List fetched successfully`, res);
  } catch (error) {
    ResponseUtil.failure(error.name, error.statusCode, res);
  }
};

       const getAssignedReportsByPoliceMan = async (req, res, next) => {
  try {
    let list = await Report.query().where({
      policemanId: req.params.policemanId,
    });
    ResponseUtil.success(
      list,
      200,
      `Report List assigned to policeman fetched successfully`,
      res
    );
  } catch (error) {
    ResponseUtil.failure(error.name, error.statusCode, res);
  }
};

       const jsonValidator = (req, res, next) => {
  let data = {
    name: "snfihihik",
    name2: "snfi",
    address: {
      lines: ["1600 Pennsylvania Avenue Northwest"],
      zip: true,
      city: "Washington",
      country: "USA",
    },

    votes: 12,
    votesMax: 10,
  };
  let schema = {
    name: { type: "string", min: 8, max: 12, required: true },
    name2: { type: "string", min: 8, max: 12, required: true },
    votes: { type: "number", min: 1 },
    votesMax: { type: "number", min: { key: "votes" } },
    address: {
      type: "object",
      properties: {
        lines: {
          type: "array",
          items: { type: "string", min: 2, max: 12 },
        },
        zip: { type: "string" },
        city: { type: "string" },
        country: { type: "string", required: true },
      },
    },
  };
  ResponseUtil.success(
    validateMyJSON(data, schema),
    200,
    `Report List assigned to policeman fetched successfully`,
    res
  );
};

       const validateMyJSON = (data, schema) => {
  let arr = [];
  for (const key in schema) {
    let propertySchema = schema[key];
    if (propertySchema.type === "string") {
      arr.push(stringValidator(key, data[key], propertySchema, data));
    }
    if (propertySchema.type === "number") {
      arr.push(numberValidator(key, data[key], propertySchema, data));
    }
    if (propertySchema.type === "boolean") {
      arr.push(booleanValidator(key, data[key], propertySchema, data));
    }
    if (propertySchema.type === "object") {
      if (
        (data[key] == null || data[key] == undefined) &&
        propertySchema.required
      ) {
        return `${key} is required`;
      }
      if (typeof data[key] != "object") {
        return `${key} is not a object`;
      }
      return validateMyJSON(data[key], propertySchema.properties);
    }
    if (propertySchema.type === "array") {
      if (
        (data[key] == null || data[key] == undefined) &&
        propertySchema.required
      ) {
        return `${key} is required`;
      }
      if (!Array.isArray(data[key])) {
        return `${key} is not a array`;
      }
      for (let i = 0; i < data[key].length; i++) {
        let arrayItemSchema = propertySchema.items;
        let value = data[key][i];
        let accessor = `${key}'s item`;
        if (arrayItemSchema.type === "string") {
          arr.push(stringValidator(accessor, value, arrayItemSchema, data));
        }
        if (arrayItemSchema.type === "number") {
          arr.push(numberValidator(accessor, value, arrayItemSchema, data));
        }
        if (arrayItemSchema.type === "boolean") {
          arr.push(booleanValidator(accessor, value, arrayItemSchema, data));
        }
        if (arrayItemSchema.type === "object") {
          if (
            (value == null || value == undefined) &&
            arrayItemSchema.required
          ) {
            return `${accessor} is required`;
          }
          if (typeof value != "object") {
            return `${accessor} is not a object`;
          }
          return validateMyJSON(value, arrayItemSchema.properties);
        }
      }
    }
  }
  return arr;
};
